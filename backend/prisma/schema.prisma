generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model closingnotes {
  id          Int         @id @default(autoincrement())
  category    String?     
  description String?     
  spaceId     Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaces  workspaces? @relation(fields: [spaceId], references: [id], map: "closingnotes_ibfk_1")

  @@index([spaceId], map: "spaceId")
}

model contactcustomfields {
  id        Int      @id @default(autoincrement())
  name      String   
  value     String   
  contactId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contacts  contacts @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "contactcustomfields_ibfk_1")

  @@index([contactId], map: "contactId")
}

model contacts {
  id                                          Int                   @id @default(autoincrement())
  name                                        String                
  number                                      String                @unique(map: "number") 
  profilePicUrl                               String?               
  createdAt                                   DateTime              @default(now())
  updatedAt                                   DateTime              @updatedAt
  email                                       String?               
  isGroup                                     Boolean               @default(false)
  spaceId                                     Int?
  countrycode                                 Int?
  contactcustomfields                         contactcustomfields[]
  workspaces_contacts_countrycodeToworkspaces workspaces?           @relation("contacts_countrycodeToworkspaces", fields: [countrycode], references: [id], map: "Contacts_countrycode_foreign_idx")
  workspaces_contacts_spaceIdToworkspaces     workspaces?           @relation("contacts_spaceIdToworkspaces", fields: [spaceId], references: [id], map: "Contacts_spaceId_foreign_idx")
  messages                                    messages[]
  tickets                                     tickets[]

  @@index([countrycode], map: "Contacts_countrycode_foreign_idx")
  @@index([spaceId], map: "Contacts_spaceId_foreign_idx")
}

model messages {
  id             String     @id 
  body           String     
  ack            Int        @default(0)
  read           Boolean    @default(false)
  mediaType      String?    
  mediaUrl       String?    
  ticketId       Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  fromMe         Boolean    @default(false)
  isDeleted      Boolean    @default(false)
  contactId      Int?
  quotedMsgId    String?    
  contacts       contacts?  @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "Messages_contactId_foreign_idx")
  messages       messages?  @relation("messagesTomessages", fields: [quotedMsgId], references: [id], map: "Messages_quotedMsgId_foreign_idx")
  other_messages messages[] @relation("messagesTomessages")
  tickets        tickets    @relation(fields: [ticketId], references: [id], onDelete: Cascade, map: "messages_ibfk_2")

  @@index([contactId], map: "Messages_contactId_foreign_idx")
  @@index([quotedMsgId], map: "Messages_quotedMsgId_foreign_idx")
  @@index([ticketId], map: "ticketId")
}

model notifications {
  id                                Int         @id @default(autoincrement())
  title                             String?     
  content                           String?     
  read                              Boolean     @default(false)
  archive                           Boolean     @default(false)
  userId                            Int?
  fromId                            Int?
  spaceId                           Int?
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @updatedAt
  users_notifications_userIdTousers users?      @relation("notifications_userIdTousers", fields: [userId], references: [id], map: "notifications_ibfk_1")
  users_notifications_fromIdTousers users?      @relation("notifications_fromIdTousers", fields: [fromId], references: [id], map: "notifications_ibfk_2")
  workspaces                        workspaces? @relation(fields: [spaceId], references: [id], map: "notifications_ibfk_3")

  @@index([fromId], map: "fromId")
  @@index([spaceId], map: "spaceId")
  @@index([userId], map: "userId")
}

model organizations {
  id                Int                 @id @default(autoincrement())
  name              String?             
  phone             String?             
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  website           String?             
  userorganizations userorganizations[]
  userworkspaces    userworkspaces[]
  workspaces        workspaces[]
}

model queues {
  id              Int       @id @default(autoincrement())
  name            String    @unique(map: "name") 
  color           String    @unique(map: "color") 
  greetingMessage String?   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tickets         tickets[]
}

model quickanswers {
  id        Int      @id @default(autoincrement())
  shortcut  String   
  message   String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model sequelizemeta {
  name String @id @unique(map: "name") 
}

model settings {
  key       String   @id 
  value     String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model teams {
  id          Int         @id @default(autoincrement())
  name        String?     
  description String?     
  spaceId     Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspaces  workspaces? @relation(fields: [spaceId], references: [id], map: "teams_ibfk_1")

  @@index([spaceId], map: "spaceId")
}

model telegramqueues {
  whatsappId Int
  queueId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([whatsappId, queueId])
}

model telegrams {
  id              Int       @id @default(autoincrement())
  name            String?   
  spaceId         Int?
  token           String?   
  isBot           Boolean?
  botId           String?   
  firstName       String?   
  userName        String?   
  status          String?   
  greetingMessage String?   
  farewellMessage String?   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  image           String?   
  tickets         tickets[]
}

model tickets {
  id             Int         @id @default(autoincrement())
  status         String      @default("pending") 
  lastMessage    String?     
  contactId      Int?
  userId         Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  whatsappId     Int?
  isGroup        Boolean     @default(false)
  unreadMessages Int?
  queueId        Int?
  telegramId     Int?
  channelType    Int?
  spaceId        Int?
  chatId         String?     
  messages       messages[]
  queues         queues?     @relation(fields: [queueId], references: [id], map: "Tickets_queueId_foreign_idx")
  workspaces     workspaces? @relation(fields: [spaceId], references: [id], map: "Tickets_spaceId_foreign_idx")
  telegrams      telegrams?  @relation(fields: [telegramId], references: [id], map: "Tickets_telegramId_foreign_idx")
  whatsapps      whatsapps?  @relation(fields: [whatsappId], references: [id], map: "Tickets_whatsappId_foreign_idx")
  contacts       contacts?   @relation(fields: [contactId], references: [id], onDelete: Cascade, map: "tickets_ibfk_1")
  users          users?      @relation(fields: [userId], references: [id], map: "tickets_ibfk_2")

  @@index([queueId], map: "Tickets_queueId_foreign_idx")
  @@index([spaceId], map: "Tickets_spaceId_foreign_idx")
  @@index([telegramId], map: "Tickets_telegramId_foreign_idx")
  @@index([whatsappId], map: "Tickets_whatsappId_foreign_idx")
  @@index([contactId], map: "contactId")
  @@index([userId], map: "userId")
}

model userorganizations {
  id            Int            @id @default(autoincrement())
  userId        Int?
  orgId         Int?
  role          String?        
  isDefault     Boolean?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         users?         @relation(fields: [userId], references: [id], map: "userorganizations_ibfk_1")
  organizations organizations? @relation(fields: [orgId], references: [id], map: "userorganizations_ibfk_2")

  @@index([orgId], map: "orgId")
  @@index([userId], map: "userId")
}

model userqueues {
  userId    Int
  queueId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, queueId])
}

model users {
  id                                        Int                 @id @default(autoincrement())
  fName                                    String              
  lName                                    String              
  email                                     String              @unique(map: "email") 
  password                                  String              
  createdAt                                 DateTime            @default(now())
  updatedAt                                 DateTime            @updatedAt
  profile                                   String              @default("admin") 
  tokenVersion                              Int                 @default(0)
  whatsappId                                Int?
  profilePic                                String?             
  status                                    String?             @default("Online") 
  notifications_notifications_userIdTousers notifications[]     @relation("notifications_userIdTousers")
  notifications_notifications_fromIdTousers notifications[]     @relation("notifications_fromIdTousers")
  tickets                                   tickets[]
  userorganizations                         userorganizations[]
  whatsapps                                 whatsapps?          @relation(fields: [whatsappId], references: [id], map: "Users_whatsappId_foreign_idx")
  userworkspaces                            userworkspaces[]

  @@index([whatsappId], map: "Users_whatsappId_foreign_idx")
}

model userworkspaces {
  id            Int            @id @default(autoincrement())
  userId        Int?
  orgId         Int?
  spaceId       Int?
  role          String?        
  isDefault     Boolean?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         users?         @relation(fields: [userId], references: [id], map: "userworkspaces_ibfk_1")
  organizations organizations? @relation(fields: [orgId], references: [id], map: "userworkspaces_ibfk_2")
  workspaces    workspaces?    @relation(fields: [spaceId], references: [id], map: "userworkspaces_ibfk_3")

  @@index([orgId], map: "orgId")
  @@index([spaceId], map: "spaceId")
  @@index([userId], map: "userId")
}

model whatsappqueues {
  whatsappId Int
  queueId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([whatsappId, queueId])
}

model whatsapps {
  id              Int       @id @default(autoincrement())
  session         String?   
  qrcode          String?   
  status          String?   
  battery         String?   
  plugged         Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String    @unique(map: "name") 
  isDefault       Boolean   @default(false)
  retries         Int       @default(0)
  greetingMessage String?   
  farewellMessage String?   
  iochannel       String?   
  webhook         String?   
  apitoken        String?   
  userId          String?   
  spaceId         String?   
  image           String?   
  tickets         tickets[]
  users           users[]
}

model workspaces {
  id                                        Int              @id @default(autoincrement())
  name                                      String?          
  orgId                                     Int?
  role                                      String?          
  isDefault                                 Boolean?
  createdAt                                 DateTime         @default(now())
  updatedAt                                 DateTime         @updatedAt
  closingnotes                              closingnotes[]
  contacts_contacts_countrycodeToworkspaces contacts[]       @relation("contacts_countrycodeToworkspaces")
  contacts_contacts_spaceIdToworkspaces     contacts[]       @relation("contacts_spaceIdToworkspaces")
  notifications                             notifications[]
  teams                                     teams[]
  tickets                                   tickets[]
  userworkspaces                            userworkspaces[]
  organizations                             organizations?   @relation(fields: [orgId], references: [id], map: "workspaces_ibfk_1")

  @@index([orgId], map: "orgId")
}
